import tkinter as tk
from tkinter import ttk
from tkinter import *
import os
import os.path
import getpass
from win32com import client

# Base window
window = ttk
window = tk.Tk()
window.title("TAG 'IT'")
window.iconbitmap("C:\pysearchtool\Tagit_tagicon.ico")
window.minsize(300, 100)
# window.colormapwindows("blue")
# declare excel
EXCEL_CLS_NAME = "Excel.Application"


def searchmacrow():
    searchbox = textbox1.get("1.0", "end").strip()
    print(searchbox)

    if bool(searchbox) == 1:
        class XlMacro:

            def __init__(self, path, book, module, name, *args):
                self._path = path  # path containing workbook
                self._book = book  # workbook name like Book1.xlsm
                self._module = module  # module name, e.g., Module1
                self._name = name  # procedure or function name
                self._params = args  # argument(s)
                self._wb = None

            @property
            def workbook(self):
                return self._wb

            @property
            def wb_path(self):
                return os.path.join(self._path, self._book)

            @property
            def name(self):
                return f'{self._book}!{self._module}.{self._name}'

            @property
            def params(self):
                return self._params

            def get_workbook(self):
                wb_name = os.path.basename(self.wb_path)
                try:
                    xl = client.GetActiveObject(EXCEL_CLS_NAME)
                except:
                    # Excel is not running, so we need to handle it.
                    xl = client.Dispatch(EXCEL_CLS_NAME)
                if wb_name in [wb.Name for wb in xl.Workbooks]:
                    return xl.Workbooks[wb_name]
                else:
                    return xl.Workbooks.Open(self.wb_path)

            def Run(self, *args, **kwargs):
                keep_open = kwargs.get('keep_open', True)
                save_changes = kwargs.get('save_changes', False)
                self._wb = self.get_workbook()
                xl_app = self._wb.Application
                xl_app.Visible = True
                ret = None
                if args is None:
                    ret = xl_app.Run(self.name)
                elif not args:
                    # run with some default parameters
                    ret = xl_app.Run(self.name, *self.params)
                else:
                    ret = xl_app.Run(self.name, *args)
                if not keep_open:
                    self.workbook.Close(save_changes)
                    self._wb = None
                    xl_app.Quit()
                return ret

        path = r'C:\pysearchtool'
        book = 'SearchTool.xlsm'
        module = 'integeratepython'
        macros = ['integarate']

        def default_params(macro):
            d = {
                'integarate': [searchbox]
            }
            return d.get(macro)

        for m in macros:
            args = default_params(m)
            if args:
                macro = XlMacro(path, book, module, m, *args)
            else:
                macro = XlMacro(path, book, module, m)
            x = macro.Run()
            print(f'returned {x} from {m}({args})' if x else f'Successfully executed {m}({args})')


def addsearchmacro():
    addbox = textbox2.get("1.0", "end").strip()
    searchbox = textbox1.get("1.0", "end").strip()
    addstr = (searchbox + "@@" + addbox)
    if bool(addbox) and bool(searchbox) == 1:
        class XlMacro:

            def __init__(self, path, book, module, name, *args):
                self._path = path  # path containing workbook
                self._book = book  # workbook name like Book1.xlsm
                self._module = module  # module name, e.g., Module1
                self._name = name  # procedure or function name
                self._params = args  # argument(s)
                self._wb = None

            @property
            def workbook(self):
                return self._wb

            @property
            def wb_path(self):
                return os.path.join(self._path, self._book)

            @property
            def name(self):
                return f'{self._book}!{self._module}.{self._name}'

            @property
            def params(self):
                return self._params

            def get_workbook(self):
                wb_name = os.path.basename(self.wb_path)
                try:
                    xl = client.GetActiveObject(EXCEL_CLS_NAME)
                except:
                    # Excel is not running, so we need to handle it.
                    xl = client.Dispatch(EXCEL_CLS_NAME)
                if wb_name in [wb.Name for wb in xl.Workbooks]:
                    return xl.Workbooks[wb_name]
                else:
                    return xl.Workbooks.Open(self.wb_path)

            def Run(self, *args, **kwargs):
                keep_open = kwargs.get('keep_open', True)
                save_changes = kwargs.get('save_changes', False)
                self._wb = self.get_workbook()
                xl_app = self._wb.Application
                xl_app.Visible = True
                ret = None
                if args is None:
                    ret = xl_app.Run(self.name)
                elif not args:
                    # run with some default parameters
                    ret = xl_app.Run(self.name, *self.params)
                else:
                    ret = xl_app.Run(self.name, *args)
                if not keep_open:
                    self.workbook.Close(save_changes)
                    self._wb = None
                    xl_app.Quit()
                return ret

        # print(username)
        path = r'C:\pysearchtool'
        book = 'SearchAddin.xlam'
        module = 'Main'
        macros = ['AddSearchResult']

        def default_params(macro):
            d = {
                'AddSearchResult': ["Documents", addstr, searchbox]
            }
            return d.get(macro)

        for m in macros:
            args = default_params(m)
            if args:
                macro = XlMacro(path, book, module, m, *args)
            else:
                macro = XlMacro(path, book, module, m)
            x = macro.Run()
            print(f'returned {x} from {m}({args})' if x else f'Successfully executed {m}({args})')
            textbox2.delete("1.0", "end")
            textbox1.delete("1.0", "end")
    else:
        print("write something")


def deletetextbox():
    textbox2.delete("1.0", "end")


# hide show function
def showwidget():
    if var.get() == ("on"):
        textbox2.grid(column=1, row=3)
        Addbutton.grid(column=0, row=4)
        textout = textbox2.get("1.0", "end")
        print(textout)


    elif var.get() == ("off"):
        textbox2.grid_forget()
        Addbutton.grid_forget()


# check Folder and file exiat

def fileexist():
    # check for pathexist
    path: str = 'C:\SearchTool\Documents'
    # Check whether the
    # specified path is an
    # existing directory or not
    isdir = os.path.isdir(path)
    print("path found", isdir)
    if bool(isdir) == 0:
        # findsearchtool folder avail
        path: str = 'C:\SearchTool'
        isdir = os.path.isdir(path)
        print("searchtool available")
        if bool(isdir) == 1:
            directory2 = "Documents"
            parent_dir2 = "C:\\SearchTool\\"
            pathdir2 = os.path.join(parent_dir2, directory2)
            os.mkdir(pathdir2)
        else:
            # Directory check
            parent_dir = "C:\\"
            directory = "SearchTool"
            pathdir = os.path.join(parent_dir, directory)
            os.mkdir(pathdir)
            directory2 = "Documents"
            parent_dir2 = "C:\\SearchTool\\"
            pathdir2 = os.path.join(parent_dir2, directory2)
            os.mkdir(pathdir2)
            print("no directory found")
    # to create file
    username = getpass.getuser()
    filename = username + ".Tag"
    # Path instr file
    cpath = "C:\\SearchTool\\Documents\\"
    path = cpath + filename
    # Check whether the
    # specified path is an
    # existing directory or not
    isFile = os.path.isfile(path)
    print("File found", isFile)
    if bool(isFile) == 0:
        outFileName = path
        outFile = open(outFileName, "a")
        outFile.close()
        print("filecreated")
    # add tag to search
    # check for string exist
    addbox = textbox2.get("1.0", "end").strip()
    searchbox = textbox1.get("1.0", "end").strip()
    instr = (searchbox + "@@" + addbox)
    username = getpass.getuser()
    filename = username + ".Tag"
    # Path
    cpath = "C:\\SearchTool\\Documents\\"
    instrpath = cpath + filename

    string1 = instr
    # opening a text file
    file1 = open(instrpath, "r")

    # read file content
    readfile = file1.read()

    # checking condition for string found or not
    if string1 in readfile:
        print('String', string1, 'Found In File')
    else:
        file1 = open(instrpath, "a")  # append mode
        file1.write("\n")
        file1.write(instr)
        file1.close()
        textbox2.delete("1.0", "end")
        textbox1.delete("1.0", "end")
        print('search', string1, 'added')







# GUI section
# Heading label
label1hed = ttk.Label(window, text="Enter your TAG ")
label1hed.grid(column=0, row=1)

# search button
sbutton = ttk.Button(window, text="Search", command=searchmacrow)
sbutton.grid(column=0, row=2)

# Tag search
textbox1 = tk.Text(window, height=1, width=20, font="Timesnewroman")
textbox1.grid(column=1, row=2)

# Add Tag
var: tk.StringVar = tk.StringVar()
Add = ttk.Checkbutton(window, text="AddTag", variable=var, onvalue="on", offvalue="off", command=showwidget)
Add.grid(column=0, row=3)

# Add textbox
textbox2 = tk.Text(window, height=1, width=20, font="timesnewroman")
textbox2.grid(column=1, row=3)
textbox2.grid_forget()

# Add Dropdown
OPTIONS = [
    "public",
    "private"
]
variable = tk.StringVar(window)
variable.set(OPTIONS[0])  # default value
optionbutton = tk.OptionMenu(window, variable, *OPTIONS)
optionbutton.grid(column=0, row=5)
# saveTagButton
Addbutton = ttk.Button(window, text="ADD", command=fileexist)
Addbutton.grid_forget()

window.mainloop()